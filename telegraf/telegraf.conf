# Global tags applied to all metrics
[global_tags]
  customer = "DevOpsea"
  environment = "Dev"
  os = "Linux"

# Agent configuration
[agent]
  interval = "5s"                 # Data collection interval
  round_interval = true            # Round collection interval
  metric_batch_size = 1000         # Max number of metrics to send in a single batch
  metric_buffer_limit = 10000      # Max number of metrics to keep in memory
  collection_jitter = "0s"         # Add random delays to collection to avoid load spikes
  flush_interval = "10s"           # How often to flush data to output plugins
  flush_jitter = "0s"              # Add random delays to flushing to avoid load spikes
  precision = ""                   # Timestamp precision for metrics
  hostname = "docker-telegraf"     # Override default hostname
  omit_hostname = false            # Include hostname in metrics
  ## Log at debug level.
  debug = true

# Output plugin configuration for InfluxDB
[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]  # InfluxDB server URL
  database = "influx"              # Database name
  timeout = "15s"                   # Timeout for HTTP requests
  username = "admin"               # InfluxDB username
  password = "admin"               # InfluxDB password

# Input plugin to collect Nginx metrics
#[[inputs.nginx]]
#  urls = ["http://nginx/nginx_status"]  # URL for Nginx status page
#  interval = "60s"

# Input plugin to collect CPU metrics
[[inputs.cpu]]
  percpu = true                    # Collect per-CPU metrics
  totalcpu = true                  # Collect total CPU metrics
  collect_cpu_time = false         # Don't collect CPU time metrics
  report_active = false            # Don't report 'active' CPU time metrics
  interval = "60s"

# Input plugin to collect disk metrics
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]  # Ignore these filesystems
  interval = "60s"

# Input plugin to collect disk I/O metrics
#[[inputs.diskio]]
#interval = "60s"
# No additional configuration required

# Input plugin to collect kernel metrics
[[inputs.kernel]]
#interval = "60s"
# No additional configuration required

# Input plugin to collect memory metrics
[[inputs.mem]]
interval = "60s"
# No additional configuration required

# Input plugin to collect process metrics
[[inputs.processes]]
interval = "60s"
# No additional configuration required

# Input plugin to collect swap metrics
#[[inputs.swap]]
# No additional configuration required

# Input plugin to collect system metrics
#[[inputs.system]]
#interval = "60s"
# No additional configuration required

#[[inputs.net]]
#  interfaces = ["eth*", "enp0s[0-1]", "lo", "wlan*"]

# Read metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
  ## Broker URLs for the MQTT server or cluster.  To connect to multiple
  ## clusters or standalone servers, use a separate plugin instance.
  ##   example: servers = ["tcp://localhost:1883"]
  ##            servers = ["ssl://localhost:1883"]
  ##            servers = ["ws://localhost:1883"]
  servers = ["tcp://mqtt5:1883"]

  ## Topics that will be subscribed to.
  topics = [
    "telegraf/host01/cpu",
    "telegraf/+/mem",
    "sensors/#",
    "battery/#",
    "deye/#",
    "deye2/#",
  ]

  ## The message topic will be stored in a tag specified by this value.  If set
  ## to the empty string no topic tag will be created.
  # topic_tag = "deye"

  ## QoS policy for messages
  ##   0 = at most once
  ##   1 = at least once
  ##   2 = exactly once
  ##
  ## When using a QoS of 1 or 2, you should enable persistent_session to allow
  ## resuming unacknowledged messages.
  # qos = 0

  ## Connection timeout for initial connection in seconds
  # connection_timeout = "30s"

  ## Maximum messages to read from the broker that have not been written by an
  ## output.  For best throughput set based on the number of metrics within
  ## each message and the size of the output's metric_batch_size.
  ##
  ## For example, if each message from the queue contains 10 metrics and the
  ## output metric_batch_size is 1000, setting this to 100 will ensure that a
  ## full batch is collected and the write is triggered immediately without
  ## waiting until the next flush_interval.
  # max_undelivered_messages = 1000

  ## Persistent session disables clearing of the client session on connection.
  ## In order for this option to work you must also set client_id to identify
  ## the client.  To receive messages that arrived while the client is offline,
  ## also set the qos option to 1 or 2 and don't forget to also set the QoS when
  ## publishing.
  # persistent_session = false

  ## If unset, a random client ID will be generated.
  # client_id = ""

  ## Username and password to connect MQTT server.
  username = "test"
  password = "test"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "value"
  data_type = "float"

#  data_format = "influx"


  ## Enable extracting tag values from MQTT topics
  ## _ denotes an ignored entry in the topic path
  ## [[inputs.mqtt_consumer.topic_parsing]]
    #topic = "deye/#"
    #measurement = "soc"
    #tags = "soc"
    #fields = ""
  ## Value supported is int, float, unit
  #   [[inputs.mqtt_consumer.topic.types]]
  #      key = type